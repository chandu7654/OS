#include <stdio.h>
#include <stdlib.h>

// Function to perform SCAN scheduling
void scanDisk(int arr[], int head, int size) {
    int distance = 0;
    int cur_track;

    // Sorting the array in ascending order
    for (int i = 0; i < size - 1; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] > arr[j]) {
                // Swap
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }

    // Finding the closest index where the head is
    int cur_index;
    for (cur_index = 0; cur_index < size; cur_index++) {
        if (arr[cur_index] > head)
            break;
    }

    // Scanning to the right from the head
    for (int i = cur_index; i < size; i++) {
        cur_track = arr[i];
        printf("Move to track %d\n", cur_track);
        distance += abs(cur_track - head);
        head = cur_track;
    }

    // Scanning to the left from the head
    for (int i = cur_index - 1; i >= 0; i--) {
        cur_track = arr[i];
        printf("Move to track %d\n", cur_track);
        distance += abs(cur_track - head);
        head = cur_track;
    }

    printf("Total distance moved: %d\n", distance);
}

// Driver program
int main() {
    int size, head;

    // Input size of the disk queue
    printf("Enter the size of the disk queue: ");
    scanf("%d", &size);

    // Input disk queue elements
    int *arr = (int *)malloc(size * sizeof(int));
    printf("Enter the disk queue elements:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    // Input initial position of the disk head
    printf("Enter the initial position of the disk head: ");
    scanf("%d", &head);

    // Call the SCAN scheduling function
    scanDisk(arr, head, size);

    free(arr);
    return 0;
}
